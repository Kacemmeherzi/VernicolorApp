import 'dart:convert';
import 'package:http/http.dart' as http;

import 'package:flutter/material.dart';
import 'package:vernicolorapp/models/ProductIssue.dart';

class AddProductIssue extends StatefulWidget {
  final int productId;

  const AddProductIssue({Key? key, required this.productId}) : super(key: key);

  @override
  _AddIssueFormState createState() => _AddIssueFormState();
}

class _AddIssueFormState extends State<AddProductIssue> {
  final _formKey = GlobalKey<FormState>();
  String issueType = '';
  String issueDescription = '';
  Future<void> sendIssue() async {
    final url = Uri.parse(
        'http://10.0.2.2:8082/api/product-issues/create'); // Replace with your API endpoint

    // Create the request body
    Map<String, dynamic> requestBody = {
      'productId': widget.productId,
      'type': issueType,
      'description': issueDescription,
    };

    try {
      // Send the POST request
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json', // Set the content type to JSON
        },
        body: jsonEncode(requestBody),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Issue sent successfully!'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.pop(context);
        // Success
        print('Issue sent successfully');
      } else {
        // Handle error response
        print('Failed to send issue. Status code: ${response.statusCode}');
        print('Response body: ${response.body}');
      }
    } catch (e) {
      // Handle any exceptions (e.g., network issues)
      print('Error occurred while sending issue: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Issue for Product ${widget.productId}'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Issue Type Input
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Issue Type',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the issue type';
                  }
                  return null;
                },
                onChanged: (value) {
                  setState(() {
                    issueType = value;
                  });
                },
              ),
              SizedBox(height: 16),

              // Issue Description Input
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Issue Description',
                  border: OutlineInputBorder(),
                ),
                maxLines: 3,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the issue description';
                  }
                  return null;
                },
                onChanged: (value) {
                  setState(() {
                    issueDescription = value;
                  });
                },
              ),
              SizedBox(height: 32),

              // Submit Button
              ElevatedButton.icon(
                onPressed: () {
                  // Validate the form
                  if (_formKey.currentState!.validate()) {
                    // Create the ProductIssue object and handle submission
                    ProductIssue newIssue = ProductIssue(
                      id: 0, // assuming the ID is generated by the backend
                      type: issueType,
                      description: issueDescription,
                    );

                    sendIssue();
                  }
                },
                label: Text("Add Product"),
                icon: Icon(Icons.add),
                style: ElevatedButton.styleFrom(
                    minimumSize: Size(double.infinity, 10),
                    padding:
                        EdgeInsets.symmetric(vertical: 25), // Button height
                    textStyle: TextStyle(fontSize: 16),
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.black),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
